const childProcess = require('child_process');
const json2ts = require('json-schema-to-typescript');
const fs = require('fs');

const serverPackage = 'jupyter_lsp';
const schemaLocalPath = 'schema/schema.json';
const bannerComment =
  '/* eslint-disable */ \n/**\n* This file was automatically generated by json-schema-to-typescript.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run jlpm build:schema to regenerate this file.\n*/';
const cmd = `python -c 'import pkg_resources;print(pkg_resources.resource_filename("${serverPackage}", "${schemaLocalPath}"))'`;
let value;
try {
  value = childProcess.execSync(cmd, {});
  const schemaPath = value
    .toString()
    .replace(/(\r\n|\n)$/, '')
    .trim();

  json2ts
    .compileFromFile(schemaPath, {
      unreachableDefinitions: true,
      bannerComment
    })
    .then(ts => {
      fs.writeFileSync('src/schema.ts', ts);
    });
} catch {
  const anyType = `
export type LanguageServerSession = any;
export type LanguageServerSpec = any;
export type ServerSpecProperties = any;
  `;
  console.error('jupyterlab_server not found, using any type');
  fs.writeFileSync('src/schema.ts', anyType);
}

const pluginSchema = '../lsp-extension/schema/plugin.json';
try {
  json2ts.compileFromFile(pluginSchema, { bannerComment }).then(ts => {
    fs.writeFileSync('src/plugin.ts', ts);
  });
} catch {
  const anyType = `
export type LanguageServer2 = any;
export type AskServersToSendTraceNotifications = any;
  `;
  fs.writeFileSync('src/plugin.ts', anyType);
}
