name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  IMAGE: jupyterlab:${{ github.event.pull_request.number || github.ref }}

jobs:
  build:
    name: Build image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          target: build
          tags: ${{ env.IMAGE }}
          outputs: type=docker,dest=/tmp/jlab-build.tar
      - name: Upload docker image
        uses: actions/upload-artifact@v4
        with:
          name: jupyterlab-docker
          path: /tmp/jlab-build.tar
          retention-days: 1

  python-linux-tests:
    name: Linux ${{ matrix.group }} test
    needs: build
    strategy:
      matrix:
        group: [integrity, usage, usage2, python]
        python-version: ["3.11"]
      fail-fast: false
    timeout-minutes: 45
    runs-on: ubuntu-22.04
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: jupyterlab-docker
        path: /tmp
    - name: Load image
      run: |
        docker load --input /tmp/jlab-build.tar
        docker image ls -a
    - name: Run test ${{ matrix.group }}
      run: |
        docker run --env CI=1 --env GROUP=${{ matrix.group }} ${{ env.IMAGE }} bash ./scripts/ci_script.sh
    # FIXME upload artifacts

  python-macos-tests:
    name: macOS ${{ matrix.group }} test
    # Run costly MacOS jobs only if Linux tests are passing
    needs: python-linux-tests
    strategy:
      matrix:
        group: [integrity, python, usage, usage2]
        python-version: ["3.11"]
      fail-fast: false
    timeout-minutes: 45
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        env:
          GROUP: ${{ matrix.group }}
        run: |
          bash ./scripts/ci_install.sh

      - name: Run test ${{ matrix.group }}
        env:
          GROUP: ${{ matrix.group }}
          JLAB_BROWSER_TYPE: webkit
        run: |
          bash ./scripts/ci_script.sh

  python-windows-tests:
    name: Windows ${{ matrix.group }} test
    # Run costly Windows jobs only if Linux tests are passing
    needs: python-linux-tests
    strategy:
      matrix:
        group: [integrity, python]
        python-version: ["3.11"]
      fail-fast: false
    runs-on: windows-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        env:
          GROUP: ${{ matrix.group }}
        run: .\scripts\ci_install
        shell: pwsh

      - name: Run test ${{ matrix.group }}
        env:
          GROUP: ${{ matrix.group }}
        run: .\scripts\ci_script
        shell: pwsh

  python-tests:
    name: ${{ matrix.group }} python-${{ matrix.python-version }} test
    needs: python-linux-tests
    strategy:
      matrix:
        group:
          - lint
          - integrity2
          - integrity3
          # FIXME merge with releaser test - release_test
          - docs
          - splice_source
          - examples
          - interop
          - nonode
        # FIXME This will be used by the base setup action
        # apply for other python version: group: [integrity, usage, usage2, python]
        # python-version: ["3.8", "3.11"]
        python-version: ["3.11"]
        include:
          - group: examples
            upload-output: true
          - group: release_test
            upload-output: true
        exclude:
          - group: integrity
            python-version: "3.8"
          - group: integrity2
            python-version: "3.8"
          - group: integrity3
            python-version: "3.8"
          - group: release_test
            python-version: "3.8"
          - group: docs
            python-version: "3.8"
          - group: usage
            python-version: "3.8"
          - group: usage2
            python-version: "3.8"
          - group: nonode
            python-version: "3.8"
          - group: lint
            python-version: "3.8"
          - group: examples
            python-version: "3.8"
          - group: splice_source
            python-version: "3.8"
      fail-fast: false
    timeout-minutes: 45
    runs-on: ubuntu-22.04
    env:
      DOCKER_VOLUME: ${{ github.workspace }}/shared-volume
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: jupyterlab-docker
        path: /tmp
    - name: Load image
      run: |
        docker load --input /tmp/jlab-build.tar
        docker image ls -a
    - name: Run test ${{ matrix.group }}
      run: |
        mkdir -p ${DOCKER_VOLUME}
        docker run \
          -v ${DOCKER_VOLUME}:/shared-volume \
          --env CI=1 --env GROUP=${{ matrix.group }} --env DOCKER_VOLUME="/shared-volume" \
          ${{ env.IMAGE }} \
          bash ./scripts/ci_script.sh

    - name: Upload Test assets
      if: ${{ matrix.upload-output && always() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.group }} ${{ github.run_number }}
        path: ${{ env.DOCKER_VOLUME }}

  js-tests:
    name: Test ${{ matrix.group }}
    needs: build
    strategy:
      matrix:
        # Fix for https://github.com/jupyterlab/jupyterlab/issues/13903
        include:
          - group: js-debugger
            python-version: '3.11'
        group:
          [
            js-application,
            js-apputils,
            js-cell-toolbar,
            js-cells,
            js-codeeditor,
            js-codemirror,
            js-completer,
            js-console,
            js-coreutils,
            js-csvviewer,
            js-debugger,
            js-docmanager,
            js-docregistry,
            js-documentsearch,
            js-filebrowser,
            js-fileeditor,
            js-imageviewer,
            js-inspector,
            js-logconsole,
            js-lsp,
            js-mainmenu,
            js-mermaid,
            js-metadataform,
            js-metapackage,
            js-nbformat,
            js-notebook,
            js-observables,
            js-outputarea,
            js-pluginmanager,
            js-rendermime,
            js-services,
            js-settingeditor,
            js-settingregistry,
            js-shortcuts-extension,
            js-statedb,
            js-statusbar,
            js-testing,
            js-terminal,
            js-toc,
            js-translation,
            js-ui-components,
            js-vega5-extension,
            js-workspaces,
          ]
      fail-fast: false
    runs-on: ubuntu-22.04
    timeout-minutes: 40
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: jupyterlab-docker
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/jlab-build.tar
          docker image ls -a

      - name: Run test ${{ matrix.group }}
        run: |
          docker run --env CI=1 --env GROUP=${{ matrix.group }} ${{ env.IMAGE }} bash ./scripts/ci_script.sh

  e2e-base:
    name: Visual Regression Tests
    needs: build
    timeout-minutes: 80
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8]
        shardTotal: [8]
    env:
      DOCKER_VOLUME: ${{ github.workspace }}/shared-volume
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: jupyterlab-docker
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/jlab-build.tar
          docker image ls -a

      # FIXME
      # - name: Set up browser cache
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ${{ github.workspace }}/pw-browsers
      #     key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

      - name: Run test galata integration test
        run: |
          mkdir -p ${DOCKER_VOLUME}
          docker run \
            -v ${DOCKER_VOLUME}:/shared-volume \
            --env CI=1 --env GROUP=e2e-galata --env DOCKER_VOLUME="/shared-volume/" \
            ${{ env.IMAGE }} \
            bash ./scripts/ci_script.sh --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Upload Galata Test assets
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jupyterlab-galata-test-assets-${{ matrix.shardIndex }}
          path: ${{ env.DOCKER_VOLUME }}
            # galata/test-jupyterlab-results
            # galata/test-results
          retention-days: 1

      # - name: Upload Galata Test report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: jupyterlab-galata-report
      #     path: |
      #       galata/playwright-report

      # - name: Print JupyterLab logs
      #   if: always()
      #   run: |
      #     cat /tmp/jupyterlab_server.log

  e2e-base-report:
    name: Merge integration tests reports
    if: always()
    needs: [e2e-base]

    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Install Playwright
      run: |
        npm init -y
        npm install playwright

    - name: Download blob reports from GitHub Actions Artifacts
      uses: actions/download-artifact@v4
      with:
        path: pw-assets
        pattern: jupyterlab-galata-test-assets-*
        merge-multiple: true

    - name: Merge into HTML Report
      run: npx playwright merge-reports --reporter html ./pw-assets/pw-blob-report

    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: jupyterlab-galata-test-assets-${{ github.run_attempt }}
        path: |
          playwright-report
          pw-assets
        retention-days: 14

  check_links:
    # FIXME we should use the docker image as it builds the JS assets
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - run: |
          node ./jupyterlab/staging/yarn.js install
          node ./jupyterlab/staging/yarn.js run build:packages
          node ./jupyterlab/staging/yarn.js run docs
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1
        with:
          ignore_glob: "docs/api packages/ui-components/docs/source/ui_components.rst images"
          ignore_links: ".*/images/[\\w-]+.png https://docs.github.com/en/.* https://jupyterlab.github.io https://mybinder.org/v2/gh/jupyterlab/.* https://github.com/[^/]+/?$"

  test_minimum_versions:
    name: Test Minimum Versions
    needs: python-linux-tests
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
        with:
          python_version: "3.8"
      - name: Install minimum versions
        uses: jupyterlab/maintainer-tools/.github/actions/install-minimums@v1
      - name: Install dependencies
        run: |
          bash ./scripts/ci_install.sh
      - name: Run the unit tests
        run: pytest -vv || pytest -vv --lf

  make_sdist:
    # FIXME drop this and use the sdist from the releaser check
    name: Make SDist
    needs: test_minimum_versions
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - name: Install dependencies
        run: |
          bash ./scripts/ci_install.sh
      - name: Build SDist
        run: |
          pip install build
          python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: "sdist"
          path: dist/*.tar.gz

  test_sdist:
    runs-on: ubuntu-latest
    needs: [make_sdist]
    name: Install from SDist and Test
    timeout-minutes: 20
    steps:
      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - name: Download sdist
        uses: actions/download-artifact@v4
      - name: Install From SDist
        run: |
          set -ex
          cd sdist
          mkdir test
          tar --strip-components=1 -zxvf *.tar.gz -C ./test
          cd test
          pip install -e .[dev,test]
          pip install pytest-github-actions-annotate-failures
      - name: Run Test
        run: |
          cd sdist/test
          pytest -vv || pytest -vv --lf
